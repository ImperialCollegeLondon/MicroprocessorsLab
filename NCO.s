#include <xc.inc>
	
global	Phase_Setup, Timer_Setup, Lookup_Setup, DDS_Int_Hi  ; global routines
global	Phase_Jump, Phase_Accum	; global variables


psect	udata_acs   ; reserve data space in access ram
Phase_Accum:	ds  1
Phase_Jump:	ds  1
Counter:	ds  1

psect	udata_bank4 ; reserve data anywhere in RAM (here at 0x400)
Lookup_Array:	ds  0xFF

psect	data

Lookup_Table:	; sine wave
	db	0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95
	db	0x98, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae
	db	0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4
	db	0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8
	db	0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8
	db	0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf4
	db	0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfb, 0xfc
	db	0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff
	db	0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xfd
	db	0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6
	db	0xf5, 0xf4, 0xf2, 0xf1, 0xef, 0xee, 0xec, 0xeb
	db	0xe9, 0xe7, 0xe5, 0xe3, 0xe1, 0xdf, 0xdd, 0xdb
	db	0xd9, 0xd7, 0xd4, 0xd2, 0xcf, 0xcd, 0xca, 0xc8
	db	0xc5, 0xc3, 0xc0, 0xbd, 0xba, 0xb8, 0xb5, 0xb2
	db	0xaf, 0xac, 0xa9, 0xa6, 0xa3, 0xa0, 0x9d, 0x9a
	db	0x97, 0x94, 0x91, 0x8e, 0x8a, 0x87, 0x84, 0x81
	db	0x7e, 0x7b, 0x78, 0x75, 0x71, 0x6e, 0x6b, 0x68
	db	0x65, 0x62, 0x5f, 0x5c, 0x59, 0x56, 0x53, 0x50
	db	0x4d, 0x4a, 0x47, 0x45, 0x42, 0x3f, 0x3c, 0x3a
	db	0x37, 0x35, 0x32, 0x30, 0x2d, 0x2b, 0x28, 0x26
	db	0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16
	db	0x14, 0x13, 0x11, 0x10, 0x0e, 0x0d, 0x0b, 0x0a
	db	0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03
	db	0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00
	db	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02
	db	0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09
	db	0x0b, 0x0c, 0x0d, 0x0f, 0x10, 0x12, 0x14, 0x15
	db	0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23, 0x25
	db	0x27, 0x2a, 0x2c, 0x2e, 0x31, 0x33, 0x36, 0x38
	db	0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c, 0x4f
	db	0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 0x67
	db	0x6a, 0x6d, 0x70, 0x73, 0x76, 0x79, 0x7c
	Lookup_Length	EQU 0xFF
	align	2
    
psect	dac_code, class=CODE
	
DDS_Int_Hi:	
	btfss	TMR0IF		; check that this is timer0 interrupt
	retfie	f		; if not then return
	call	Output_Wav
	bcf	TMR0IF		; clear interrupt flag
	retfie	f		; fast return from interrupt

Phase_Setup:
	clrf	Phase_Accum,	A
	clrf	Phase_Jump,	A
	movlw	0x00
	movwf	Phase_Accum,	A
	movlw	0x01
	movwf	Phase_Jump,	A
	return

Timer_Setup:
	clrf	TRISD,	A	; Set PORTD as all outputs
	clrf	LATD,	A	; Clear PORTD outputs
	movlw	10001000B	; Set timer0 to 16-bit, Fosc/4
	movwf	T0CON,	A	; = 16MHz clock rate, approx 4ms rollover
	bsf	TMR0IE		; Enable timer0 interrupt
	bsf	GIE		; Enable all interrupts
	return

Lookup_Setup:
	bcf	CFGS			; point to Flash program memory  
	bsf	EEPGD			; access Flash program memory
	lfsr	0, Lookup_Array		; Load FSR0 with address in RAM	
	movlw	low highword(Lookup_Table)	; address of data in PM
	movwf	TBLPTRU,    A		; load upper bits to TBLPTRU
	movlw	high(Lookup_Table)	; address of data in PM
	movwf	TBLPTRH,    A		; load high byte to TBLPTRH
	movlw	low(Lookup_Table)	; address of data in PM
	movwf	TBLPTRL,    A		; load low byte to TBLPTRL
	movlw	Lookup_Length		; bytes to read
	movwf	Counter,    A
Loop:
	tblrd*+			    ; one byte from PM to TABLAT, increment TBLPRT
	movff	TABLAT, POSTINC0    ; move data from TABLAT to (FSR0), inc FSR0	
	decfsz	Counter,    A	    ; count down to zero
	bra	Loop
	clrf	POSTINC0,   A
	movlw	0x04
	movwf	FSR0H,	A
	return

Output_Wav:
Phase_Amp:
	movff	Phase_Accum, FSR0L
	movff	INDF0,	LATD
Phase_Inc:
	movf	Phase_Jump, W,	A
	addwf	Phase_Accum, A
	return

	end
